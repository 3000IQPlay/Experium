package dev._3000IQPlay.experium.features.modules.exploit;

import com.mojang.realmsclient.gui.ChatFormatting;
import dev._3000IQPlay.experium.features.command.Command;
import dev._3000IQPlay.experium.features.modules.Module;
import dev._3000IQPlay.experium.features.setting.Setting;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.math.MathHelper;

public class CityPhase
        extends Module {
	private static CityPhase INSTANCE = new CityPhase();
	public final Setting<Integer> timeout = this.register(new Setting<Integer>("Timeout", 5, 1, 10));
	public final Setting<Boolean> disablee = this.register(new Setting<Boolean>("Disable", true));
	public int disableThingy;
	
	public CityPhase() {
        super("CityPhase", "Phases slightly into the wall to prevent crystal damage", Module.Category.EXPLOIT, true, false, false);
		this.setInstance();
    }
	
	public static CityPhase getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new CityPhase();
        }
        return INSTANCE;
    }

    private void setInstance() {
        INSTANCE = this;
    }
	
	@Override
    public void onUpdate() {
		if (CityPhase.nullCheck()) {
            return;
        }
        if (CityPhase.INSTANCE.movingByKeys()) {
            this.disable();
			return;
        }
        if (CityPhase.mc.world.getCollisionBoxes(CityPhase.mc.player, CityPhase.mc.player.getEntityBoundingBox().grow(0.01, 0, 0.01)).size() < 2) {
            CityPhase.mc.player.setPosition(CityPhase.roundToClosest(CityPhase.mc.player.posX, Math.floor(CityPhase.mc.player.posX) + 0.301, Math.floor(CityPhase.mc.player.posX) + 0.699), CityPhase.mc.player.posY, CityPhase.roundToClosest(CityPhase.mc.player.posZ, Math.floor(CityPhase.mc.player.posZ) + 0.301, Math.floor(CityPhase.mc.player.posZ) + 0.699));
        } else if (CityPhase.mc.player.ticksExisted % this.timeout.getValue().intValue() == 0) {
            CityPhase.mc.player.setPosition(CityPhase.mc.player.posX + MathHelper.clamp(CityPhase.roundToClosest(CityPhase.mc.player.posX, Math.floor(CityPhase.mc.player.posX) + 0.241, Math.floor(CityPhase.mc.player.posX) + 0.759) - CityPhase.mc.player.posX, -0.03, 0.03), CityPhase.mc.player.posY, CityPhase.mc.player.posZ + MathHelper.clamp(CityPhase.roundToClosest(CityPhase.mc.player.posZ, Math.floor(CityPhase.mc.player.posZ) + 0.241, Math.floor(CityPhase.mc.player.posZ) + 0.759) - CityPhase.mc.player.posZ, -0.03, 0.03));
            CityPhase.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(CityPhase.mc.player.posX, CityPhase.mc.player.posY, CityPhase.mc.player.posZ, true));
            CityPhase.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(CityPhase.roundToClosest(CityPhase.mc.player.posX, Math.floor(CityPhase.mc.player.posX) + 0.23, Math.floor(CityPhase.mc.player.posX) + 0.77), CityPhase.mc.player.posY, CityPhase.roundToClosest(CityPhase.mc.player.posZ, Math.floor(CityPhase.mc.player.posZ) + 0.23, Math.floor(CityPhase.mc.player.posZ) + 0.77), true));
			if (this.disablee.getValue().booleanValue()) {
			    disableThingy++;
			} else {
				disableThingy = 0;
			}
        }
		if (disableThingy >= 2 && this.disablee.getValue().booleanValue()) {
			disableThingy = 0;
			this.disable();
	    }
    }

    private boolean movingByKeys() {
        return CityPhase.mc.gameSettings.keyBindForward.isKeyDown() || CityPhase.mc.gameSettings.keyBindBack.isKeyDown() || CityPhase.mc.gameSettings.keyBindLeft.isKeyDown() || CityPhase.mc.gameSettings.keyBindRight.isKeyDown();
    }

    public static double roundToClosest(double num, double low, double high) {
        double d1 = num - low;
        double d2 = high - num;
        if (d2 > d1) {
            return low;
        } else {
            return high;
        }
    }
}
